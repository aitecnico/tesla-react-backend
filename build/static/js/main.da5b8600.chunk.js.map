{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","error","setError","isLoaded","setIsLoaded","items","setItems","useEffect","fetch","then","res","json","result","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","map","tsla","Marker","position","gps","latitude","longitude","Popup","name","status","stallCount","id","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAsEeA,MA/Df,WAAgB,IAAD,EACaC,mBAAS,MADtB,mBACNC,EADM,KACCC,EADD,OAEmBF,oBAAS,GAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGaJ,mBAAiB,IAH9B,mBAGNK,EAHM,KAGCC,EAHD,KA0Bb,OAlBAC,qBAAU,WACRC,MAAM,mBACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACCR,GAAY,GACZE,EAASM,MAKX,SAACX,GACCG,GAAY,GACZF,EAASD,QAGd,IAECA,EACK,qDACGE,EAKR,cADA,CACCU,EAAA,EAAD,CAAcC,OAAQ,CAAC,WAAY,YAAaC,KAAM,GAAIC,iBAAiB,EAA3E,UACE,cAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAKLd,EAAMe,KAAI,SAAAC,GAAI,OACb,cAACC,EAAA,EAAD,CAAsBC,SAAU,CAACF,EAAKG,IAAIC,SAAUJ,EAAKG,IAAIE,WAA7D,SAEE,cAACC,EAAA,EAAD,CAAOJ,SAAU,CAACF,EAAKG,IAAIC,SAAUJ,EAAKG,IAAIE,WAA9C,SACE,gCACE,2BACA,6BAAK,iCACL,6BAAK,SAAWL,EAAKO,OACrB,4BAAI,WAAaP,EAAKQ,SACtB,4BAAI,gCAAkCR,EAAKS,mBARpCT,EAAKU,UAbjB,8BAAK,qBAAKC,UAAU,qBCtBhBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.da5b8600.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, } from 'react-leaflet'\nimport './App.css';\nimport { Site } from './interfaces'\n\n\n\nfunction App() {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState<Site[]>([]);\n\n  // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n  useEffect(() => {\n    fetch('/api/teslasites')\n      .then(res => res.json())\n      .then(\n        (result: Site[]) => {\n          setIsLoaded(true);\n          setItems(result);\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      )\n  }, [])\n\n  if (error) {\n    return <div>Error has happened</div>;\n  } else if (!isLoaded) {\n    return <div><div className=\"lds-dual-ring\"></div></div>;\n  } else {\n    return (\n      ///////////////////////////////Renders Map\n      <MapContainer center={[37.871593, -122.272743]} zoom={11} scrollWheelZoom={true}>\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n\n\n        {/* ///////////////Renders and Itirates through Markers on Map*/}\n        {items.map(tsla => (\n          <Marker key={tsla.id} position={[tsla.gps.latitude, tsla.gps.longitude]}>\n\n            <Popup position={[tsla.gps.latitude, tsla.gps.longitude]}>\n              <div>\n                <button></button>\n                <h1>{\"Tesla Supercharging Stations\"}</h1>\n                <h2>{\"Name: \" + tsla.name}</h2>\n                <p>{\"Status: \" + tsla.status}</p>\n                <p>{\"Number of Charging Stations: \" + tsla.stallCount}</p>\n              </div>\n            </Popup>\n\n\n          </Marker>\n        ))}\n\n      </MapContainer>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}